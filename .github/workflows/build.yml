name: Build Gennaro AI FAP for Momentum v2.0

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    
    strategy:
      matrix:
        target: [f7]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git wget curl build-essential python3 python3-pip
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Momentum firmware
      uses: actions/cache@v3
      with:
        path: Momentum-Firmware
        key: momentum-fw-${{ hashFiles('**/build.yml') }}
        restore-keys: |
          momentum-fw-
        
    - name: Clone Momentum firmware
      run: |
        if [ ! -d "Momentum-Firmware" ]; then
          echo "Cloning fresh Momentum firmware..."
          git clone --recursive --depth 1 https://github.com/Next-Flip/Momentum-Firmware.git
          cd Momentum-Firmware
          git submodule update --init --recursive
        else
          echo "Using cached Momentum firmware..."
          cd Momentum-Firmware
          git pull origin master || true
          git submodule update --recursive || true
        fi
        
    - name: Install FBT dependencies
      run: |
        cd Momentum-Firmware
        ./fbt --help
        
    - name: Create app directory structure
      run: |
        mkdir -p Momentum-Firmware/applications/external/gennaro_ai
        mkdir -p Momentum-Firmware/applications/external/gennaro_ai/icons
        
    - name: Copy application files
      run: |
        echo "=== Copying application files ==="
        
        # Copy main application files
        cp application.fam Momentum-Firmware/applications/external/gennaro_ai/
        cp gennaro_ai.c Momentum-Firmware/applications/external/gennaro_ai/
        
        echo "=== Verifying copied files ==="
        ls -la Momentum-Firmware/applications/external/gennaro_ai/
        
        echo "=== Application manifest content ==="
        cat Momentum-Firmware/applications/external/gennaro_ai/application.fam
        
    - name: Build specific FAP
      run: |
        cd Momentum-Firmware
        echo "=== Building Gennaro AI FAP specifically ==="
        ./fbt fap_gennaro_ai
        
    - name: Build all FAPs as fallback
      if: failure()
      run: |
        cd Momentum-Firmware
        echo "=== Building all external FAPs as fallback ==="
        ./fbt faps
        
    - name: Locate built FAP
      run: |
        cd Momentum-Firmware
        echo "=== Searching for Gennaro AI FAP ==="
        
        # Search in multiple possible locations
        find . -name "*gennaro*.fap" -type f -exec ls -la {} \;
        find . -name "gennaro_ai.fap" -type f -exec ls -la {} \;
        
        # Check standard build directories
        ls -la build/f*/dist/faps/ 2>/dev/null || echo "Standard faps directory not found"
        ls -la build/f*/ext/ 2>/dev/null || echo "Ext directory not found"
        
        # Find the actual FAP and copy to workspace
        FAP_FILE=$(find . -name "gennaro_ai.fap" -type f | head -1)
        if [ -n "$FAP_FILE" ]; then
          echo "Found FAP at: $FAP_FILE"
          cp "$FAP_FILE" ../gennaro_ai_momentum_v2.fap
          ls -la ../gennaro_ai_momentum_v2.fap
        else
          echo "FAP not found, searching for any Gennaro-related files..."
          find . -iname "*gennaro*" -type f
        fi
        
    - name: Verify FAP file
      run: |
        if [ -f "gennaro_ai_momentum_v2.fap" ]; then
          echo "=== FAP file successfully created ==="
          ls -la gennaro_ai_momentum_v2.fap
          file gennaro_ai_momentum_v2.fap
        else
          echo "=== No FAP file found, listing all FAP files ==="
          find Momentum-Firmware -name "*.fap" -type f -exec ls -la {} \;
        fi
        
    - name: Upload Gennaro AI FAP
      uses: actions/upload-artifact@v4
      with:
        name: gennaro_ai_momentum_v2
        path: "gennaro_ai_momentum_v2.fap"
        retention-days: 30
        if-no-files-found: warn
        
    - name: Upload all FAPs for debugging
      if: always()
      run: |
        echo "=== Creating debug FAP collection ==="
        mkdir -p debug_faps
        find Momentum-Firmware -name "*.fap" -type f -exec cp {} debug_faps/ \; 2>/dev/null || echo "No FAPs found for debug"
        ls -la debug_faps/ || echo "Debug faps directory empty"
        
    - name: Upload debug artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: all_momentum_faps_debug_v2
        path: debug_faps/
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: momentum_build_logs_v2
        path: |
          Momentum-Firmware/build/
          Momentum-Firmware/.fbt/
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Create release info
      if: success()
      run: |
        echo "=== Build Summary ===" > build_info.txt
        echo "Firmware: Momentum" >> build_info.txt
        echo "App: Gennaro AI v2.0" >> build_info.txt
        echo "Features: Full UART Communication, Anti-crash, Flash LED Control" >> build_info.txt
        echo "Build Date: $(date)" >> build_info.txt
        echo "Commit: ${{ github.sha }}" >> build_info.txt
        cat build_info.txt
        
    - name: Upload build info
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: build_info_v2
        path: build_info.txt
        retention-days: 30
