name: Build ESP32-AI-Monitor FAP

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        firmware: [unleashed, official]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ufbt
        
    - name: Setup uFBT for Unleashed
      if: matrix.firmware == 'unleashed'
      run: |
        ufbt update --channel=dev --url=https://github.com/DarkFlippers/unleashed-firmware
        
    - name: Setup uFBT for Official
      if: matrix.firmware == 'official'
      run: |
        ufbt update --channel=release
        
    - name: Build FAP
      run: |
        ufbt build
        
    - name: Get build info
      id: build_info
      run: |
        echo "firmware_version=$(ufbt -s APPVER)" >> $GITHUB_OUTPUT
        echo "api_version=$(ufbt -s APIVERSION)" >> $GITHUB_OUTPUT
        echo "build_date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
        
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        cp dist/*.fap artifacts/
        cp README.md artifacts/
        
        # Rinomina con versione firmware
        cd artifacts
        for file in *.fap; do
          base_name=$(basename "$file" .fap)
          mv "$file" "${base_name}_${{ matrix.firmware }}_${{ steps.build_info.outputs.build_date }}.fap"
        done
        
    - name: Upload FAP artifacts
      uses: actions/upload-artifact@v4
      with:
        name: esp32-ai-monitor-${{ matrix.firmware }}
        path: artifacts/
        retention-days: 30
        
    - name: Create release assets
      if: github.event_name == 'release'
      run: |
        cd artifacts
        zip -r ../esp32-ai-monitor-${{ matrix.firmware }}.zip .
        
    - name: Upload to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: esp32-ai-monitor-${{ matrix.firmware }}.zip
        asset_name: esp32-ai-monitor-${{ matrix.firmware }}.zip
        asset_content_type: application/zip

  test-compatibility:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: esp32-ai-monitor-*
        merge-multiple: true
        
    - name: Test FAP files
      run: |
        echo "üîç Testing compiled FAP files..."
        for fap in *.fap; do
          echo "Testing $fap..."
          file "$fap"
          size=$(stat -c%s "$fap")
          echo "Size: $size bytes"
          
          # Verifica che sia un ELF valido
          if file "$fap" | grep -q "ELF 32-bit LSB executable, ARM"; then
            echo "‚úÖ $fap is valid"
          else
            echo "‚ùå $fap is invalid"
            exit 1
          fi
          
          # Verifica dimensione ragionevole (< 2MB)
          if [ "$size" -lt 2097152 ]; then
            echo "‚úÖ $fap size OK"
          else
            echo "‚ùå $fap too large"
            exit 1
          fi
        done
        
    - name: Generate build report
      run: |
        echo "# üìä Build Report" > build_report.md
        echo "" >> build_report.md
        echo "| Firmware | File | Size | Status |" >> build_report.md
        echo "|----------|------|------|--------|" >> build_report.md
        
        for fap in *.fap; do
          size=$(stat -c%s "$fap")
          size_kb=$((size / 1024))
          echo "| $(echo $fap | cut -d'_' -f4) | $fap | ${size_kb}KB | ‚úÖ Valid |" >> build_report.md
        done
        
        cat build_report.md
        
    - name: Upload build report
      uses: actions/upload-artifact@v4
      with:
        name: build-report
        path: build_report.md
