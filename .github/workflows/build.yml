name: Build Gennaro AI FAP for Momentum v2.1

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git wget curl build-essential python3 python3-pip
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Momentum firmware
      uses: actions/cache@v3
      with:
        path: Momentum-Firmware
        key: momentum-fw-${{ hashFiles('**/build.yml') }}-v2
        restore-keys: |
          momentum-fw-v2-
          momentum-fw-
        
    - name: Clone or update Momentum firmware
      run: |
        if [ ! -d "Momentum-Firmware" ]; then
          echo "Cloning fresh Momentum firmware"
          git clone --recursive --depth 1 https://github.com/Next-Flip/Momentum-Firmware.git
          cd Momentum-Firmware
          git submodule update --init --recursive
        else
          echo "Using cached Momentum firmware"
          cd Momentum-Firmware
          git pull origin master || echo "Pull failed, using cached version"
          git submodule update --recursive || echo "Submodule update failed"
        fi
        
    - name: Verify FBT tool
      run: |
        cd Momentum-Firmware
        ./fbt --help || echo "FBT help failed"
        
    - name: Create clean app directory
      run: |
        echo "Creating clean app directory"
        rm -rf Momentum-Firmware/applications/external/gennaro_ai
        mkdir -p Momentum-Firmware/applications/external/gennaro_ai
        
    - name: Create simple icon
      run: |
        echo "Creating application icon"
        python3 << 'EOF'
import base64
# Simple 10x10 black square PNG
png_data = base64.b64decode(b'iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAdgAAAHYBTnsmCAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAABYSURBVBiVpY+xDQAgCAS/xgk6gx3AlThCJ3AER+gMduAEJsbGhISGXHI/jyQAAP//ZgZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmaH8AEMU5AK1dCd/gAAAABJRU5ErkJggg==')
with open('icon.png', 'wb') as f:
    f.write(png_data)
print("Icon created successfully")
EOF
        ls -la icon.png
        file icon.png
        
    - name: Copy application files
      run: |
        echo "Copying application files"
        cp gennaro_ai.c Momentum-Firmware/applications/external/gennaro_ai/
        cp application.fam Momentum-Firmware/applications/external/gennaro_ai/
        cp icon.png Momentum-Firmware/applications/external/gennaro_ai/
        
        echo "Verifying copied files"
        ls -la Momentum-Firmware/applications/external/gennaro_ai/
        
        echo "Application manifest content"
        cat Momentum-Firmware/applications/external/gennaro_ai/application.fam
        
        echo "C file size"
        wc -l Momentum-Firmware/applications/external/gennaro_ai/gennaro_ai.c
        
    - name: Build Gennaro AI FAP
      run: |
        cd Momentum-Firmware
        echo "Building Gennaro AI FAP"
        ./fbt fap_gennaro_ai 2>&1 | tee build.log || {
          echo "BUILD FAILED - Showing build log"
          cat build.log
          echo "Trying fallback build"
          ./fbt faps 2>&1 | tee fallback_build.log || echo "Fallback also failed"
        }
        
    - name: Locate and verify FAP
      run: |
        cd Momentum-Firmware
        echo "Searching for built FAP"
        
        find . -name "*gennaro*.fap" -type f -exec ls -lah {} \; || echo "No gennaro FAPs found"
        find . -name "*.fap" -path "*/gennaro_ai/*" -type f -exec ls -lah {} \; || echo "No FAPs in gennaro_ai path"
        
        ls -la build/f*/dist/faps/ 2>/dev/null | grep -i gennaro || echo "No gennaro FAP in standard location"
        
        FAP_FILE=$(find . -name "*gennaro*.fap" -type f | head -1)
        if [ -n "$FAP_FILE" ]; then
          echo "Found FAP: $FAP_FILE"
          cp "$FAP_FILE" ../gennaro_ai_v2.1.fap
          ls -lah ../gennaro_ai_v2.1.fap
          file ../gennaro_ai_v2.1.fap
        else
          echo "No FAP found"
          echo "All FAP files in build"
          find . -name "*.fap" -type f | head -20
        fi
        
    - name: Upload main FAP
      uses: actions/upload-artifact@v4
      with:
        name: gennaro_ai_v2.1_momentum
        path: "gennaro_ai_v2.1.fap"
        retention-days: 30
        if-no-files-found: warn
        
    - name: Collect debug info
      if: always()
      run: |
        echo "Creating debug package"
        mkdir -p debug_package
        
        cp Momentum-Firmware/build.log debug_package/ 2>/dev/null || echo "No build.log"
        cp Momentum-Firmware/fallback_build.log debug_package/ 2>/dev/null || echo "No fallback log"
        
        find Momentum-Firmware -name "*.fap" -type f -exec cp {} debug_package/ \; 2>/dev/null || echo "No FAPs found"
        
        cp gennaro_ai.c debug_package/ 2>/dev/null || echo "No source"
        cp application.fam debug_package/ 2>/dev/null || echo "No manifest"
        
        echo "Build Date: $(date)" > debug_package/build_info.txt
        echo "Commit: ${{ github.sha }}" >> debug_package/build_info.txt
        echo "Repository: ${{ github.repository }}" >> debug_package/build_info.txt
        echo "Files in debug package:" >> debug_package/build_info.txt
        ls -la debug_package/ >> debug_package/build_info.txt
        
    - name: Upload debug package
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gennaro_ai_debug_v2.1
        path: debug_package/
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Create release notes
      if: success()
      run: |
        cat > release_notes.md << 'EOF'
# GENNARO AI v2.1 BUILD SUCCESS

## Features
- Serial Monitor Interface
- GPIO UART Communication
- Real-time ESP32 Response Display
- 6 Predefined AI Commands
- Vision Analysis & Math Solver
- OCR & Object Counting
- Crash-Safe Architecture
- Memory Overflow Protection

## Hardware Requirements
- Flipper Zero with Momentum Firmware
- ESP32-CAM AI-Thinker
- MAX9814 Microphone Module

## Installation
1. Download `gennaro_ai_v2.1.fap`
2. Copy to `/ext/apps/GPIO/` on SD card
3. Connect hardware as per documentation
4. Run from Apps > GPIO > Gennaro AI

## Safety Features
- Buffer overflow protection
- Stack usage minimized
- Null pointer validation
- Safe memory allocation
- Crash prevention

Build: $(date)
Commit: ${{ github.sha }}
EOF
        
        cat release_notes.md
        
    - name: Upload release notes
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: release_notes_v2.1
        path: release_notes.md
        retention-days: 30
