name: Build Gennaro AI FAP for Momentum v2.1

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    
    strategy:
      matrix:
        target: [f7]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git wget curl build-essential python3 python3-pip
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Momentum firmware
      uses: actions/cache@v3
      with:
        path: Momentum-Firmware
        key: momentum-fw-${{ hashFiles('**/build.yml') }}-v2
        restore-keys: |
          momentum-fw-v2-
          momentum-fw-
        
    - name: Clone or update Momentum firmware
      run: |
        if [ ! -d "Momentum-Firmware" ]; then
          echo "=== Cloning fresh Momentum firmware ==="
          git clone --recursive --depth 1 https://github.com/Next-Flip/Momentum-Firmware.git
          cd Momentum-Firmware
          git submodule update --init --recursive
        else
          echo "=== Using cached Momentum firmware ==="
          cd Momentum-Firmware
          git pull origin master || echo "Pull failed, using cached version"
          git submodule update --recursive || echo "Submodule update failed"
        fi
        
    - name: Verify FBT tool
      run: |
        cd Momentum-Firmware
        ./fbt --help || echo "FBT help failed"
        
    - name: Create clean app directory
      run: |
        echo "=== Creating clean app directory ==="
        rm -rf Momentum-Firmware/applications/external/gennaro_ai
        mkdir -p Momentum-Firmware/applications/external/gennaro_ai
        
    - name: Create simple icon
      run: |
        echo "=== Creating application icon ==="
        # Create a simple 10x10 PNG icon
        python3 -c "
import base64
# Simple 10x10 black square PNG
png_data = base64.b64decode('iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAdgAAAHYBTnsmCAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAABYSURBVBiVpY+xDQAgCAS/xgk6gx3AlThCJ3AER+gMduAEJsbGhISGXHI/jyQAAP//ZgZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmaH8AEMU5AK1dCd/gAAAABJRU5ErkJggg==')
with open('icon.png', 'wb') as f:
    f.write(png_data)
"
        ls -la icon.png
        file icon.png
        
    - name: Copy application files
      run: |
        echo "=== Copying application files ==="
        
        # Copy main files
        cp gennaro_ai.c Momentum-Firmware/applications/external/gennaro_ai/
        cp application.fam Momentum-Firmware/applications/external/gennaro_ai/
        cp icon.png Momentum-Firmware/applications/external/gennaro_ai/
        
        echo "=== Verifying copied files ==="
        ls -la Momentum-Firmware/applications/external/gennaro_ai/
        
        echo "=== Application manifest content ==="
        cat Momentum-Firmware/applications/external/gennaro_ai/application.fam
        
        echo "=== C file size ==="
        wc -l Momentum-Firmware/applications/external/gennaro_ai/gennaro_ai.c
        
    - name: Test compile (syntax check)
      run: |
        cd Momentum-Firmware
        echo "=== Testing syntax with gcc ==="
        gcc -c -I./firmware/targets/f*/furi_hal_include -I./applications/services/gui -I./lib/toolbox -I./lib/music_worker applications/external/gennaro_ai/gennaro_ai.c -o /tmp/syntax_test.o || echo "Syntax issues detected"
        
    - name: Build Gennaro AI FAP
      run: |
        cd Momentum-Firmware
        echo "=== Building Gennaro AI FAP ==="
        ./fbt fap_gennaro_ai 2>&1 | tee build.log || {
          echo "=== BUILD FAILED - Showing build log ==="
          cat build.log
          echo "=== Trying fallback build ==="
          ./fbt faps 2>&1 | tee fallback_build.log || echo "Fallback also failed"
        }
        
    - name: Locate and verify FAP
      run: |
        cd Momentum-Firmware
        echo "=== Searching for built FAP ==="
        
        # Multiple search patterns
        find . -name "*gennaro*.fap" -type f -exec ls -lah {} \; || echo "No gennaro FAPs found"
        find . -name "*.fap" -path "*/gennaro_ai/*" -type f -exec ls -lah {} \; || echo "No FAPs in gennaro_ai path"
        
        # Check build directories
        ls -la build/f*/dist/faps/ 2>/dev/null | grep -i gennaro || echo "No gennaro FAP in standard location"
        
        # Find any FAP and copy to workspace
        FAP_FILE=$(find . -name "*gennaro*.fap" -type f | head -1)
        if [ -n "$FAP_FILE" ]; then
          echo "✅ Found FAP: $FAP_FILE"
          cp "$FAP_FILE" ../gennaro_ai_v2.1.fap
          ls -lah ../gennaro_ai_v2.1.fap
          file ../gennaro_ai_v2.1.fap
        else
          echo "❌ No FAP found"
          echo "=== All FAP files in build ==="
          find . -name "*.fap" -type f | head -20
        fi
        
    - name: Upload main FAP
      uses: actions/upload-artifact@v4
      with:
        name: gennaro_ai_v2.1_momentum
        path: "gennaro_ai_v2.1.fap"
        retention-days: 30
        if-no-files-found: warn
        
    - name: Collect debug info
      if: always()
      run: |
        echo "=== Creating debug package ==="
        mkdir -p debug_package
        
        # Copy build logs
        cp Momentum-Firmware/build.log debug_package/ 2>/dev/null || echo "No build.log"
        cp Momentum-Firmware/fallback_build.log debug_package/ 2>/dev/null || echo "No fallback log"
        
        # Copy any found FAPs
        find Momentum-Firmware -name "*.fap" -type f -exec cp {} debug_package/ \; 2>/dev/null || echo "No FAPs found"
        
        # Copy our source files
        cp gennaro_ai.c debug_package/ 2>/dev/null || echo "No source"
        cp application.fam debug_package/ 2>/dev/null || echo "No manifest"
        
        # Create info file
        echo "Build Date: $(date)" > debug_package/build_info.txt
        echo "Commit: ${{ github.sha }}" >> debug_package/build_info.txt
        echo "Repository: ${{ github.repository }}" >> debug_package/build_info.txt
        echo "Files in debug package:" >> debug_package/build_info.txt
        ls -la debug_package/ >> debug_package/build_info.txt
        
    - name: Upload debug package
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gennaro_ai_debug_v2.1
        path: debug_package/
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Create release notes
      if: success()
      run: |
        echo "=== GENNARO AI v2.1 BUILD SUCCESS ===" > release_notes.md
        echo "" >> release_notes.md
        echo "## Features" >> release_notes.md
        echo "- ✅ Serial Monitor Interface" >> release_notes.md
        echo "- ✅ GPIO UART Communication" >> release_notes.md
        echo "- ✅ Real-time ESP32 Response Display" >> release_notes.md
        echo "- ✅ 10 Predefined AI Commands" >> release_notes.md
        echo "- ✅ Vision Analysis & Math Solver" >> release_notes.md
        echo "- ✅ OCR & Object Counting" >> release_notes.md
        echo "- ✅ Push-to-Talk Voice Control" >> release_notes.md
        echo "- ✅ Flash LED Control" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Hardware Requirements" >> release_notes.md
        echo "- Flipper Zero with Momentum Firmware" >> release_notes.md
        echo "- ESP32-CAM AI-Thinker" >> release_notes.md
        echo "- MAX9814 Microphone Module" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "1. Download \`gennaro_ai_v2.1.fap\`" >> release_notes.md
        echo "2. Copy to \`/ext/apps/GPIO/\` on SD card" >> release_notes.md
        echo "3. Connect hardware as per documentation" >> release_notes.md
        echo "4. Run from Apps > GPIO > Gennaro AI" >> release_notes.md
        echo "" >> release_notes.md
        echo "Build: $(date)" >> release_notes.md
        echo "Commit: ${{ github.sha }}" >> release_notes.md
        
        cat release_notes.md
        
    - name: Upload release notes
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: release_notes_v2.1
        path: release_notes.md
        retention-days: 30
