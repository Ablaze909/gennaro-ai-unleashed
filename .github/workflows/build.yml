name: Build Gennaro AI FAP for Unleashed Firmware

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git wget curl build-essential python3 python3-pip
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Unleashed firmware
      uses: actions/cache@v3
      with:
        path: flipperzero-firmware-unleashed
        key: unleashed-fw-${{ hashFiles('**/build.yml') }}-v1
        restore-keys: |
          unleashed-fw-v1-
          unleashed-fw-
        
    - name: Clone Unleashed firmware
      run: |
        if [ ! -d "flipperzero-firmware-unleashed" ]; then
          echo "Cloning Unleashed firmware"
          git clone --recursive --depth 1 https://github.com/DarkFlippers/unleashed-firmware.git flipperzero-firmware-unleashed
          cd flipperzero-firmware-unleashed
          git submodule update --init --recursive
        else
          echo "Using cached Unleashed firmware"
          cd flipperzero-firmware-unleashed
          git pull origin dev || echo "Pull failed, using cached version"
          git submodule update --recursive || echo "Submodule update failed"
        fi
        
    - name: Verify FBT tool
      run: |
        cd flipperzero-firmware-unleashed
        ./fbt --help
        
    - name: Create clean app directory
      run: |
        echo "Creating clean app directory"
        rm -rf flipperzero-firmware-unleashed/applications/external/gennaro_ai
        mkdir -p flipperzero-firmware-unleashed/applications/external/gennaro_ai
        
    - name: Create application icon
      run: |
        echo "Creating application icon"
        python3 -c "
        import base64
        png_data = base64.b64decode('iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAdgAAAHYBTnsmCAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAABYSURBVBiVpY+xDQAgCAS/xgk6gx3AlThCJ3AER+gMduAEJsbGhISGXHI/jyQAAP//ZgZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmaH8AEMU5AK1dCd/gAAAABJRU5ErkJggg==')
        with open('icon.png', 'wb') as f:
            f.write(png_data)
        print('Icon created successfully')
        "
        ls -la icon.png
        
    - name: Copy application files
      run: |
        echo "Copying application files"
        cp gennaro_ai.c flipperzero-firmware-unleashed/applications/external/gennaro_ai/
        cp application.fam flipperzero-firmware-unleashed/applications/external/gennaro_ai/
        cp icon.png flipperzero-firmware-unleashed/applications/external/gennaro_ai/
        
        echo "Verifying copied files"
        ls -la flipperzero-firmware-unleashed/applications/external/gennaro_ai/
        
        echo "Application manifest content"
        cat flipperzero-firmware-unleashed/applications/external/gennaro_ai/application.fam
        
    - name: Build Gennaro AI FAP (Unleashed)
      run: |
        cd flipperzero-firmware-unleashed
        echo "Building with Unleashed firmware"
        ./fbt fap_gennaro_ai 2>&1 | tee build.log || {
          echo "fap_gennaro_ai failed, trying standard commands"
          ./fbt faps 2>&1 | tee fallback_build.log || {
            echo "faps failed, trying application build"
            ./fbt applications 2>&1 | tee app_build.log || echo "All methods failed"
          }
        }
        
    - name: Locate and verify FAP
      run: |
        cd flipperzero-firmware-unleashed
        echo "Searching for built FAP"
        
        find . -name "*gennaro*.fap" -type f -exec ls -lah {} \;
        find . -name "*.fap" -path "*/gennaro_ai/*" -type f -exec ls -lah {} \;
        
        # Check standard Unleashed locations
        ls -la build/f7-firmware-*/dist/faps/ 2>/dev/null | grep -i gennaro || echo "No gennaro FAP in dist"
        ls -la build/f7-firmware-*/applications_user/ 2>/dev/null | grep -i gennaro || echo "No gennaro in apps_user"
        
        # Find and copy FAP
        FAP_FILE=$(find . -name "*gennaro*.fap" -type f | head -1)
        if [ -n "$FAP_FILE" ]; then
          echo "Found FAP: $FAP_FILE"
          cp "$FAP_FILE" ../gennaro_ai_unleashed.fap
          ls -lah ../gennaro_ai_unleashed.fap
          file ../gennaro_ai_unleashed.fap
        else
          echo "No FAP found, searching all FAPs"
          find . -name "*.fap" -type f | head -20
        fi
        
    - name: Upload Unleashed FAP
      uses: actions/upload-artifact@v4
      with:
        name: gennaro_ai_unleashed
        path: "gennaro_ai_unleashed.fap"
        retention-days: 30
        if-no-files-found: warn
        
    - name: Collect debug info
      if: always()
      run: |
        echo "Creating debug package"
        mkdir -p debug_package
        
        cp flipperzero-firmware-unleashed/build.log debug_package/ 2>/dev/null || echo "No build log"
        cp flipperzero-firmware-unleashed/fallback_build.log debug_package/ 2>/dev/null || echo "No fallback log"
        cp flipperzero-firmware-unleashed/app_build.log debug_package/ 2>/dev/null || echo "No app log"
        
        find flipperzero-firmware-unleashed -name "*.fap" -type f -exec cp {} debug_package/ \; 2>/dev/null || echo "No FAPs"
        
        cp gennaro_ai.c debug_package/ 2>/dev/null || echo "No source"
        cp application.fam debug_package/ 2>/dev/null || echo "No manifest"
        
        echo "Build Date: $(date)" > debug_package/build_info.txt
        echo "Firmware: Unleashed" >> debug_package/build_info.txt
        echo "Commit: ${{ github.sha }}" >> debug_package/build_info.txt
        echo "Files:" >> debug_package/build_info.txt
        ls -la debug_package/ >> debug_package/build_info.txt
        
    - name: Upload debug package
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: gennaro_ai_unleashed_debug
        path: debug_package/
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Create release notes
      if: success()
      run: |
        echo "# GENNARO AI - UNLEASHED BUILD SUCCESS" > release_notes.md
        echo "" >> release_notes.md
        echo "## Features" >> release_notes.md
        echo "- ✅ Real UART Reception @ 115200 baud" >> release_notes.md
        echo "- ✅ Receives ESP32 AI Responses" >> release_notes.md
        echo "- ✅ Software Bit-banging UART" >> release_notes.md
        echo "- ✅ Stable GPIO Communication" >> release_notes.md
        echo "- ✅ 5 AI Commands (Vision, Math, OCR, Status, Refresh)" >> release_notes.md
        echo "- ✅ Timestamped Message Log" >> release_notes.md
        echo "- ✅ Manual Control (No Timer Issues)" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Hardware Requirements" >> release_notes.md
        echo "- Flipper Zero with Unleashed Firmware" >> release_notes.md
        echo "- ESP32-CAM AI-Thinker" >> release_notes.md
        echo "- 4 GPIO connections" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "1. Download gennaro_ai_unleashed.fap" >> release_notes.md
        echo "2. Copy to /ext/apps/GPIO/ on SD card" >> release_notes.md
        echo "3. Connect ESP32-CAM hardware" >> release_notes.md
        echo "4. Run: Apps > GPIO > Gennaro AI" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Why Unleashed?" >> release_notes.md
        echo "- More stable API than Momentum" >> release_notes.md
        echo "- Better community support" >> release_notes.md
        echo "- Fewer BUSFAULT issues" >> release_notes.md
        echo "- Standard build commands" >> release_notes.md
        echo "- Reliable memory management" >> release_notes.md
        echo "" >> release_notes.md
        echo "Build: $(date)" >> release_notes.md
        echo "Firmware: Unleashed" >> release_notes.md
        echo "Commit: ${{ github.sha }}" >> release_notes.md
        
        cat release_notes.md
        
    - name: Upload release notes
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: release_notes_unleashed
        path: release_notes.md
        retention-days: 30
